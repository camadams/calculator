// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
<<<<<<< HEAD

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
=======
// learn more fsdf it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

<<<<<<< HEAD
=======
generator client {
    provider = "prisma-client-js"
}

>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c
model CalculatorHistory {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    userId    String

    @@index([userId])
}

<<<<<<< HEAD
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
=======
model Account {
    id                 String    @id @default(cuid())
    userId             String
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c
}

model Session {
    id           String   @id @default(cuid())
<<<<<<< HEAD
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
=======
    userId       String
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
<<<<<<< HEAD
=======
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c
    accounts      Account[]
    sessions      Session[]
}

<<<<<<< HEAD
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
=======
model VerificationRequest {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
>>>>>>> def2284128bf66f79faf8c549edd826a4e31f69c

    @@unique([identifier, token])
}
